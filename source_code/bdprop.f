      SUBROUTINE BDPROP(N, NSQ, MXLAM, NPOTL, Y1, Y2,
     1                  U, PSIMID, SUMPSI, VL, IV,
     2                  EINT, CENT, P, NODEC, EIGMIN,
     3                  WAVE, IREAD, IWRITE, IPRINT)
C  Copyright (C) 2018 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C  ---------------------------------------------------------------
C  ROUTINE TO PERFORM A BOUND-STATE PROPAGATION. ON EXIT,
C  EIGMIN CONTAINS THE SMALLEST EIGENVALUE OF THE MATCHING MATRIX.
C  Y1 CONTAINS THE MATCHING MATRIX FOR USE BY ZERVEC
C  ---------------------------------------------------------------
C  THIS VERSION ORIGINALLY BY JM Hutson, 1988.
C  MODIFIED BY AE Thornley JULY 94 TO ALLOW WAVEFUNCTION PROPAGATION
C  FOR LDMD PROPAGATOR (ONLY)
C  EXTENDED BY JM Hutson 2006 TO ALLOW HYBRID LDMD/AIRY (ENERGIES ONLY)
C  MODIFIED SEPT 2012 TO ELIMINATE 3RD PROPAGATION SEGMENT AND
C  USE THE NUMBER OF NEGATIVE EIGENVALUES OF THE MATCHING MATRIX
C
C  03-12-15 CR Le Sueur:
C  3RD PROPAGATION SEGMENT BROUGHT BACK IN ORDER TO ALLOW
C  DECOUPLING OF MATCHING POINT FROM CHANGEOVER POINT BETWEEN
C  PROPAGATORS
C  CODE FOR PROPAGATORS EXTENDED TO CODE LONG AND SHORT RANGE
C  SEPARATELY -  VALUES PASSED IN PRPDTA COMMON BLOCK IN IFLG
C
      PARAMETER (MINSTP=10)
C  DIMENSION STATEMENTS FOR ARGUMENT LIST
      DIMENSION U(NSQ),Y1(NSQ),Y2(NSQ),PSIMID(N),SUMPSI(N)
      DIMENSION P(MXLAM),VL(2),IV(2),EINT(N),CENT(N)
C
C  DYNAMIC MEMORY COMMON BLOCK
      COMMON /MEMORY/ MX,IXNEXT,NIPR,IDUMMY,X(1)
C
      COMMON /DRIVE / STEST,STEPS,STABIL,CONV,RMIN,RMAX,XEPS,DR,
     1                DRMAX,RMID,RMATCH,TOLHI,RTURN,VTOL,ESHIFT,
     2                ERED,RMLMDA,NOPEN,JKEEP,ISCRU,MAXSTP,ILDSVU
C
C  THE FOLLOWING VARIABLES FROM COMMON/DRIVE/ ARE USED WITH THESE
C  PROPAGATORS:  DR,RMIN,RMID,RMAX,ERED,RMLMDA,ISCRU
C
      COMMON /HIBRIN/ POWRX,DRAIRY
C
      LOGICAL IREAD,IWRITE,WAVE

C  COMMON BLOCK FOR PROPAGATOR CONTROL
      INTEGER MXSEG,IDIR,IFLG,NSEGS
      DOUBLE PRECISION RST,REND,DRPR
      PARAMETER (MXSEG=3)
      COMMON /PRPDTA/ RST(MXSEG),REND(MXSEG),DRPR(MXSEG),
     1                IDIR(MXSEG),IFLG(MXSEG),NSEGS,NSTEPS(MXSEG)

C  COMMON BLOCK FOR INPUT/OUTPUT CHANNEL NUMBERS
      LOGICAL PSIFMT
      COMMON /IOCHAN/ IPSISC,IWAVSC,IPSI,NWVCOL,PSIFMT

      CHARACTER(2) NCOL
      CHARACTER(40) F2000
C
      IF (WAVE) THEN
        CALL WVPROP(N)
        WRITE(NCOL,'(I2)') MIN(N,NWVCOL)
        F2000='(E15.7,'//NCOL//'E15.7)'

        IF (IPRINT.GE.30) WRITE(6,50)
  50    FORMAT('  WRITING OUT WAVEFUNCTION AT EVERY STEP')

      ENDIF

      NODEC=0
      NODES=-1
C
      IF (IREAD .OR. IWRITE) REWIND ISCRU

      IF (WAVE) SUMPSI=0D0
      IWREC=1
      NTSTPS=0
      DO ISEG=2,NSEGS
        IF (IDIR(ISEG).NE.IDIR(ISEG-1)) ICHNGE=ISEG-1
      ENDDO
C
C  NOW LOOP OVER THE SEGMENTS.
C
      DO 100 ISEG=1,NSEGS
        NUSED=0
        IF (IREAD) THEN
          READ(ISCRU) RBEGIN,RFIN,EFIRST,ISTART,NSTEPS(ISEG)
        ELSE
          ISTART=1
          IF (ISEG.EQ.1 .OR. ISEG.EQ.ICHNGE+1)
     1      ISTART=0
          IF (IDIR(ISEG).EQ.1) THEN
            RBEGIN=RST(ISEG)
            RFIN=REND(ISEG)
          ELSE
            RBEGIN=REND(ISEG)
            RFIN=RST(ISEG)
          ENDIF
          NSTEP=NINT(ABS(RFIN-RBEGIN)/DRPR(ISEG))
          DR=(RFIN-RBEGIN)/DBLE(NSTEP)
          RFIN=RBEGIN+DR*DBLE(NSTEP)
          NSTEPS(ISEG)=NSTEP
          IF (NSTEPS(ISEG).LT.MINSTP .AND. IPRPLR.NE.1) THEN
            WRITE(6,*) 'ARE YOU SURE YOU ONLY WANT',NSTEPS(ISEG),
     &                 'STEPS IN SEGMENT ',ISEG,'?'
          ENDIF
          IF (IWRITE) WRITE(ISCRU) RBEGIN,RFIN,ERED,ISTART,NSTEPS(ISEG)
        ENDIF
C
        IPROP=IFLG(ISEG)
        IT1=IXNEXT  ! EVECS
        IT2=IT1+NSQ ! EVALS
        IXNEXT=IT2+N
        CALL CHKSTR(NUSED)
        CALL YINIT(Y2,U,VL,IV,P,CENT,EINT,X(IT2),X(IT1),
     &             IPROP,N,MXLAM,NPOTL,ISCRU,ISTART,
     &             ERED,RBEGIN,RMLMDA,RBEGIN.LT.RFIN,IREAD,IWRITE,
     &             IPRINT)
        IXNEXT=IT1

        IF (IPROP.EQ.1) THEN
C  AIRY PROPAGATOR (LONG-RANGE ONLY)
            RBEG=RBEGIN
            IF (IWRITE) ITWO=0
            IF (IREAD ) ITWO=1
            IF (ISCRU.EQ.0) ITWO=-1
            IF (IDIR(ISEG).EQ.-1) THEN !INWARD PROPAGATION FROM RMAX TO RMID/RMATCH
              TOLAI=TOLHI
              DRA=-ABS(DRPR(ISEG))
              IF (TOLHI.GE.1.D0) THEN
                NSTEP=0
                RENDAI=GEOSTP(RST(ISEG),REND(ISEG),DRA,TOLHI,NSTEP)
                RBEG=RENDAI-RBEGIN
                IF (IDIR(ISEG).EQ.-1) DRA=-ABS(DRA*TOLHI**NSTEP)
              ENDIF
            ELSE ! OUTWARD PROPAGATION FROM RMID TO RMATCH
              DRA=DRPR(ISEG)
              TOLAI=TOLHI !1.D0
            ENDIF
            IT1=IXNEXT    ! W
            IT8=IT1+NSQ   ! EIGOLD
            IT2=IT8+N     ! Y1
            IT3=IT2+N     ! Y2
            IT4=IT3+N     ! Y3
            IT5=IT4+N     ! Y4
            IT6=IT5+N     ! VECNOW
            IT7=IT6+NSQ   ! VECNEW
            IT9=IT7+NSQ   ! EIGNOW
            IT10=IT9+N    ! HP
            IXNEXT=IT10+N
            CALL CHKSTR(NUSED)
            CALL AIRPRP(N,MXLAM,NPOTL,
     1                  Y2,X(IT1),U,VL,IV,EINT,CENT,P,
     2                  X(IT2),X(IT3),X(IT4),X(IT5),X(IT6),X(IT7),
     3                  X(IT8),X(IT9),X(IT10),TOLAI,POWRX,
     4                  RBEGIN,RBEG,RFIN,DRA,NSTEPS(ISEG),ERED,RMLMDA,
     5                  ITWO,ISCRU,IPRINT,ISTART,NODES)
          IXNEXT=IT1
C
        ELSEIF (IPROP.EQ.5) THEN
C  JOHNSON'S LOG-DERIVATIVE PROPAGATOR
          ESHIFT=ERED-EFIRST
          IT1=IXNEXT   ! DIAG
          IXNEXT=IT1+N
          CALL CHKSTR(NUSED)
          CALL LDPROP(N,MXLAM,NPOTL,
     1                Y2,U,VL,IV,EINT,CENT,P,X(IT1),
     3                RBEGIN,RFIN,NSTEPS(ISEG),ERED,ESHIFT,RMLMDA,
     4                IREAD,IWRITE,ISCRU,NODES,IPRINT)
          IXNEXT=IT1
C
        ELSEIF (IPROP.EQ.6) THEN
C  MANOLOPOULOS' DIABATIC LOG-DERIVATIVE PROPAGATOR
          ESHIFT=ERED-EFIRST
          IT1=IXNEXT   ! Y14
          IT2=IT1+N    ! Y23
          IT3=IT2+N    ! DIAG
C  *** EXTRA STORAGE REQUIRED FOR WAVEFUNCTIONS
          IT4=IT3+N    ! W
          IT5=IT4+NSQ  ! W2
          IT6=IT5+NSQ  ! W3
          IF (WAVE) THEN
            IXNEXT=IT6+NSQ
          ELSE
            IXNEXT=IT4
          ENDIF
          CALL CHKSTR(NUSED)
          CALL DWPROP(N,MXLAM,NPOTL,
     1                Y2,U,VL,IV,EINT,CENT,P,
     2                X(IT1),X(IT2),X(IT3),X(IT4),X(IT5),X(IT6),
     3                RBEGIN,RFIN,NSTEPS(ISEG),ERED,ESHIFT,RMLMDA,
     4                IREAD,IWRITE,ISCRU,NODES,IWREC,WAVE,IPRINT)

          IXNEXT=IT1
C
        ELSEIF (IPROP.EQ.7) THEN
C  MANOLOPOULOS' QUASI-ADIABATIC LOG-DERIVATIVE PROPAGATOR
          IT1=IXNEXT  ! T  ALREADY PRODUCED BY YINIT
          IT4=IT1+NSQ ! EIVAL
          IT9=IT4+N   ! DIAG
          IT2=IT9+N   ! Q
          IT3=IT2+NSQ ! W
          IT5=IT3+NSQ ! Y1
          IT6=IT5+N   ! Y2
          IT7=IT6+N   ! Y3
          IT8=IT7+N   ! Y4
          IXNEXT=IT8+N
          CALL CHKSTR(NUSED)
          CALL QAPROP(N,NSQ,MXLAM,NPOTL,
     1                Y2,X(IT1),U,VL,IV,EINT,CENT,P,
     2                X(IT2),X(IT3),X(IT4),X(IT5),X(IT6),X(IT7),X(IT8),
     3                X(IT9),
     4                RBEGIN,RFIN,NSTEPS(ISEG),ERED,RMLMDA,
     5                IREAD,IWRITE,ISCRU,IPRINT,NODES)
          IXNEXT=IT1
C
        ELSEIF (IPROP.EQ.9) THEN
C  MANOLOPOULOS+GRAY SYMPLECTIC PROPAGATOR
          ESHIFT=ERED-EFIRST
          IT1=IXNEXT
          IXNEXT=IT1+N
          CALL CHKSTR(NUSED)
          CALL MGPROP(N,MXLAM,NPOTL,
     1                Y2,U,VL,IV,EINT,CENT,P,X(IT1),
     3                RBEGIN,RFIN,NSTEPS(ISEG),ERED,ESHIFT,RMLMDA,
     4                IREAD,IWRITE,ISCRU,NODES,IPRINT)
C
        ELSE
          WRITE(6,110) IPROP
  110     FORMAT(/'  *** ERROR IN BDPROP. NO IMPLEMENTATION FOR ',
     1           'PROPAGATOR CODE =',I3)
          STOP
        ENDIF
C
C  ---------------------------------------------------------------
C  END OF PROPAGATION
C
        IF (IPRINT.GE.8) THEN
          IF (ISEG.EQ.1) WRITE(6,*)
          WRITE(6,120) RBEGIN,RFIN,NSTEPS(ISEG),NODES
        ENDIF
  120   FORMAT('  LOG DERIVATIVE MATRIX PROPAGATED FROM ',
     1         F12.4,'  TO ',F12.4,'  IN ',I6,'  STEPS.',
     2         I6,' NODES FOUND.')
C
        NODEC=NODEC+NODES
        IF (ISEG.EQ.ICHNGE .AND. .NOT.WAVE) THEN
          DO I=1,NSQ
            Y1(I)=Y2(I) ! Y1 IS NOW THE END OF THE OUTWARDS PROPAGATION
          ENDDO
        ELSEIF (ISEG.EQ.1 .AND. WAVE) THEN
C  Y1 IS NO LONGER NEEDED, SO IS USED TO STORE PSIMID FOR BOTH PROPAGATIONS
C  AWAY FROM RMATCH
          DO I=1,N
            Y1(I)=PSIMID(I)
          ENDDO
        ENDIF
C
        IF (WAVE .AND. (ISEG.EQ.NSEGS .OR. ISEG.EQ.ICHNGE)) THEN
C  REVERSE PROPAGATION FROM RMATCH TO GET WAVEFUNCTION
          IF (ISEG.EQ.ICHNGE) THEN
C  KREC IS USED TO SAVE THE VALUE OF IWREC FOR SECOND PART OF WAVEFUNCTION
C  PROPAGATION.
C  IWREC IS WHERE TO READ RAB MATRIX FROM (SO GOES FROM LARGE NUMBER BACK
C  TOWARDS 1 IN BOTH CALLS TO EFPROP).
            KREC=IWREC
            ISLST=1
          ELSEIF (ISEG.EQ.NSEGS) THEN
            ISLST=ICHNGE+1
          ENDIF
C  JPREC IS WHERE TO WRITE PSI TO (SO IN FIRST USE OF EFPROP GOES FROM
C  LARGE NUMBER BACK TOWARDS 1, AND IN SECOND USE OF EFPROP GOES FROM
C  LARGE NUMBER+1 FORWARDS TO EVEN BIGGER NUMBER).
          JPREC=KREC

          DO JSEG=ISEG,ISLST,-1
            IF (IPRINT.GE.8) WRITE(6,130) REND(JSEG),RST(JSEG),
     1                                    NSTEPS(JSEG)
  130       FORMAT('  PROPAGATING WAVEFUNCTION FROM ',F10.4,' TO ',
     1             F10.4,' IN ',I6, ' STEPS'/)
C  Y2 AND U ARE NOW NO LONGER NEEDED SO THEY ARE REUSED FOR WORKSPACE HERE
            PSIMID=Y1(1:N)
            IF (IDIR(ISEG).EQ.1) THEN
              RBEGIN=RST(ISEG)
              RFIN=REND(ISEG)
            ELSE
              RBEGIN=REND(ISEG)
              RFIN=RST(ISEG)
            ENDIF
            CALL EFPROP(N,RBEGIN,RFIN,NSTEPS(JSEG),Y2,
     1                  U,PSIMID,IWREC,SUMPSI,IPRINT,JPREC)

          ENDDO

C  COLLECT THE CONTRIBUTIONS TO THE NORMALISATION CONSTANT
          IF (ISEG.EQ.NSEGS) THEN
            IF (IPRINT.GE.6) WRITE(6,140)
 140        FORMAT(/'  NORMALISATION FACTOR CALCULATED BY ',
     1             'SIMPSON''S RULE FOR EACH CHANNEL')
            ANORM=0.D0
            DO I=1,N
              ANORM=ANORM+SUMPSI(I)
              IF (IPRINT.GE.8) WRITE(6,150) I,SUMPSI(I)
 150          FORMAT(I4,5X,G25.15)
            ENDDO
            IF (IPRINT.GE.6) WRITE(6,160) ANORM
 160        FORMAT(/'  TOTAL NORMALISATION FACTOR',5X,G18.10)
          ENDIF

        ENDIF

        IF (IPRINT.GE.15) CALL MATPRN(6,Y2,N,N,N,2,Y2,' LOGD MATRIX',1)
        NTSTPS=NTSTPS+NSTEPS(ISEG)
  100 CONTINUE
C  END OF LOOP OVER SEGMENTS
C
C  WRITE OUT WAVEFUNCTION TO IPSI IN ORDER RMIN TO RMAX
C
      IF (WAVE) THEN
        CALL WVSTPS(NTSTPS+1)
        DO I=1,NTSTPS+1
          READ(IPSISC,REC=I) R,PSIMID
          IF (PSIFMT) THEN
            WRITE(IPSI,FMT=F2000) R,PSIMID/SQRT(ANORM)
          ELSE
            WRITE(IPSI) R,PSIMID/SQRT(ANORM)
          ENDIF 
        ENDDO
        CLOSE (IPSISC)
        CLOSE (IWAVSC)
        RETURN
      ENDIF

      DO I=1,NSQ
        Y2(I)=-Y2(I)+Y1(I) ! MATCHING MATRIX IS DEFINED AS INWARD-OUTWARD
        Y1(I)=Y2(I)        ! EVMTCH NEEDS A COPY OF THE MATCHING MATRIX
      ENDDO
C
      IF (IPRINT.GE.12) CALL MATPRN(6,Y2,N,N,N,2,Y2,
     1                              ' MATCHING MATRIX',1)
C
C  DIAGONALISE THE MATCHING MATRIX.
C
      IFAIL=0
      CALL F02AAF(Y2, N, N, U, X(IT1), IFAIL)
      IF (IFAIL.NE.0) GOTO 900
C
      NEGCNT=0
      EIGMIN=1.D30
      DO I=1,N
        IF (U(I).LE.0.D0) NEGCNT=NEGCNT+1
        IF (ABS(U(I)).GT.ABS(EIGMIN)) CYCLE
        EIGMIN=U(I)
      ENDDO
C  INCLUDE NEGCNT INSTEAD OF DOING 3RD PROPAGATION (SEPT 2012)
      NODEC=NODEC+NEGCNT
      IF (IPRINT.GE.8) WRITE(6,70) NEGCNT
  70  FORMAT('  COUNT OF NEGATIVE EIGENVALUES OF MATCHING MATRIX',
     1       ' GIVES',I6,' NODES.')
C
      IF (IPRINT.GE.9) WRITE(6,80) (I,U(I),I=1,N)
  80  FORMAT(/'  EIGENVALUES OF MATCHING MATRIX ARE:'/
     1       (2X,5(0P,I4,1P,1X,G15.7)))
C
C     IF (IPRINT.GE.8) WRITE(6,90) EIGMIN
  90  FORMAT(/'  SMALLEST EIGENVALUE OF MATCHING MATRIX IS ',1P,G11.4)
      RETURN
C
  900 WRITE(6,910) IFAIL
  910 FORMAT(/'  *** ERROR IN BDPROP: EIGENVALUE ROUTINE FAILS WITH ',
     1       'IFAIL =',I3)
      STOP
      END
